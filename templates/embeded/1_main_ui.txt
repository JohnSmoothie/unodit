# -*- coding: utf-8 -*-
#!/usr/bin/env python

# =============================================================================
#
# Dialog implementation generated from a XDL file.
#
# Created: ${GENERATED_DATETIME}
#      by: ${UNODIT_VERSION}
#
# WARNING! All changes made in this file will be overwritten
#          if the file is generated again!
#
# =============================================================================

import uno
import unohelper
from com.sun.star.awt import XActionListener
from com.sun.star.task import XJobExecutor

from com.sun.star.awt.MessageBoxButtons import BUTTONS_OK, BUTTONS_OK_CANCEL, BUTTONS_YES_NO, BUTTONS_YES_NO_CANCEL, BUTTONS_RETRY_CANCEL, BUTTONS_ABORT_IGNORE_RETRY
from com.sun.star.awt.MessageBoxButtons import DEFAULT_BUTTON_OK, DEFAULT_BUTTON_CANCEL, DEFAULT_BUTTON_RETRY, DEFAULT_BUTTON_YES, DEFAULT_BUTTON_NO, DEFAULT_BUTTON_IGNORE
from com.sun.star.awt.MessageBoxType import MESSAGEBOX, INFOBOX, WARNINGBOX, ERRORBOX, QUERYBOX

# ----------------- helpers for API_inspector tools -----------------

# uncomment for MRI
#def mri(ctx, target):
#${I}mri = ctx.ServiceManager.createInstanceWithContext("mytools.Mri", ctx)
#${I}mri.inspect(target)

# uncomment for Xray
#def xray(myObject):
#${I}try:
#${I}${I}sm = uno.getComponentContext().ServiceManager
#${I}${I}mspf = sm.createInstanceWithContext("com.sun.star.script.provider.MasterScriptProviderFactory", uno.getComponentContext())
#${I}${I}scriptPro = mspf.createScriptProvider("")
#${I}${I}xScript = scriptPro.getScript("vnd.sun.star.script:XrayTool._Main.Xray?language=Basic&location=application")
#${I}${I}xScript.invoke((myObject,), (), ())
#${I}${I}return
#${I}except:
#${I}${I}raise _rtex("\nBasic library Xray is not installed", uno.getComponentContext())
# -------------------------------------------------------------------


class ${APP_NAME}(unohelper.Base, XActionListener, XJobExecutor):
${I}"""
${I}Class documentation...
${I}"""
${I}def __init__(self):
${I}${I}self.LocalContext = uno.getComponentContext()
${I}${I}self.ServiceManager = self.LocalContext.ServiceManager
${I}${I}self.Toolkit = self.ServiceManager.createInstanceWithContext("com.sun.star.awt.ExtToolkit", self.LocalContext)

${I}${I}# -----------------------------------------------------------
${I}${I}#               Create dialog and insert controls
${I}${I}# -----------------------------------------------------------

${I}${I}# --------------create dialog container and set model and properties
${I}${I}self.DialogContainer = self.ServiceManager.createInstanceWithContext("com.sun.star.awt.UnoControlDialog", self.LocalContext)
${I}${I}self.DialogModel = self.ServiceManager.createInstance("com.sun.star.awt.UnoControlDialogModel")
${I}${I}self.DialogContainer.setModel(self.DialogModel)
${GEN_DIALOG_PROPERTIES}
${GEN_CONTROLS}

${I}def showDialog(self):
${I}${I}self.DialogContainer.setVisible(True)
${I}${I}self.DialogContainer.createPeer(self.Toolkit, None)
${I}${I}self.DialogContainer.execute()

${I}# --------- functions -----------------------

${I}def myFunction(self):
${I}${I}# TODO: not implemented
${I}${I}pass

${I}# --------- helpers -------------------------

${I}def messageBox(self, MsgText, MsgTitle, MsgType=MESSAGEBOX, MsgButtons=BUTTONS_OK):
${I}${I}sm = self.LocalContext.ServiceManager
${I}${I}si = sm.createInstanceWithContext("com.sun.star.awt.Toolkit", self.LocalContext)
${I}${I}mBox = si.createMessageBox(self.Toolkit, MsgType, MsgButtons, MsgTitle, MsgText)
${I}${I}mBox.execute()

${I}# -----------------------------------------------------------
${I}#               Action events
${I}# -----------------------------------------------------------

${I}def actionPerformed(self, oActionEvent):
${GEN_ACTIONS_EVENTS}

${GEN_CALLBAKS}

def ${EXEC_FUNCTION_PREFIX}${APP_NAME}(*args):
${I}app = ${APP_NAME}()
${I}app.showDialog()

g_exportedScripts = ${EXEC_FUNCTION_PREFIX}${APP_NAME},
