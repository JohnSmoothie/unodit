# -*- coding: utf-8 -*-
#!/usr/bin/env python

# =============================================================================
#
# Write your code here
#
# =============================================================================

import uno
from com.sun.star.awt.MessageBoxButtons import BUTTONS_OK, BUTTONS_OK_CANCEL, BUTTONS_YES_NO, BUTTONS_YES_NO_CANCEL, BUTTONS_RETRY_CANCEL, BUTTONS_ABORT_IGNORE_RETRY
from com.sun.star.awt.MessageBoxButtons import DEFAULT_BUTTON_OK, DEFAULT_BUTTON_CANCEL, DEFAULT_BUTTON_RETRY, DEFAULT_BUTTON_YES, DEFAULT_BUTTON_NO, DEFAULT_BUTTON_IGNORE
from com.sun.star.awt.MessageBoxType import MESSAGEBOX, INFOBOX, WARNINGBOX, ERRORBOX, QUERYBOX

from ${UI_DIR}.${APP_NAME}_UI import ${APP_NAME}_UI


# ----------------- helper code for API_inspector tool MRI ----------
# def mri(ctx, target):
# ${I}mri = ctx.ServiceManager.createInstanceWithContext("mytools.Mri", ctx)
# ${I}mri.inspect(target)
# -------------------------------------------------------------------


class ${APP_NAME}(${APP_NAME}_UI):
${I}'''
${I}Class documentation...
${I}'''
${I}def __init__(self, panelWin):
${I}${I}${APP_NAME}_UI.__init__(self, panelWin)

${I}${I}# --------- my code ---------------------
${I}${I}self.DialogModel.Title = "${APP_NAME}"
${I}${I}# mri(self.LocalContext, self.DialogContainer)

${I}def myFunction(self):
${I}${I}# TODO: not implemented
${I}${I}pass

${I}${I}# --------- helpers ---------------------

${I}def messageBox(self, MsgText, MsgTitle, MsgType=MESSAGEBOX, MsgButtons=BUTTONS_OK):
${I}${I}sm = self.LocalContext.ServiceManager
${I}${I}si = sm.createInstanceWithContext("com.sun.star.awt.Toolkit", self.LocalContext)
${I}${I}mBox = si.createMessageBox(self.Toolkit, MsgType, MsgButtons, MsgTitle, MsgText)
${I}${I}mBox.execute()

${I}# -----------------------------------------------------------
${I}#               Execute dialog
${I}# -----------------------------------------------------------

${I}def showDialog(self):
${I}${I}self.DialogContainer.setVisible(True)
${I}${I}self.DialogContainer.createPeer(self.Toolkit, None)
${I}${I}self.DialogContainer.execute()

${I}# -----------------------------------------------------------
${I}#               Action events
${I}# -----------------------------------------------------------

${GEN_ACTIONS_CALLBACKS}


def ${EXEC_FUNCTION_PREFIX}${APP_NAME}(*args):
${I}app = ${APP_NAME}()
${I}app.showDialog()

g_exportedScripts = ${EXEC_FUNCTION_PREFIX}${APP_NAME},
