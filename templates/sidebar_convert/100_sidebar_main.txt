# -*- coding: utf-8 -*-

import uno
import unohelper

from com.sun.star.ui import XUIElementFactory
from com.sun.star.lang import XComponent
from com.sun.star.ui import XUIElement, XToolPanel,XSidebarPanel, LayoutSize
from com.sun.star.ui.UIElementType import TOOLPANEL as UET_TOOLPANEL

from logic.Test_convert import Test_convert

from com.sun.star.uno import RuntimeException as _rtex


def xray(myObject):
${I}try:
${I}${I}sm = uno.getComponentContext().ServiceManager
${I}${I}mspf = sm.createInstanceWithContext("com.sun.star.script.provider.MasterScriptProviderFactory", uno.getComponentContext())
${I}${I}scriptPro = mspf.createScriptProvider("")
${I}${I}xScript = scriptPro.getScript("vnd.sun.star.script:XrayTool._Main.Xray?language=Basic&location=application")
${I}${I}xScript.invoke((myObject,), (), ())
${I}${I}return
${I}except:
${I}${I}raise _rtex("\nBasic library Xray is not installed", uno.getComponentContext())


class ElementFactory( unohelper.Base, XUIElementFactory):

${I}def __init__(self, ctx):
${I}${I}self.ctx = ctx

${I}def createUIElement(self,url,args):

${I}${I}try:
${I}${I}${I}xParentWindow = None
${I}${I}${I}xFrame = None
${I}${I}${I}xUIElement = None

${I}${I}${I}for arg in args:
${I}${I}${I}${I}if arg.Name == "Frame":
${I}${I}${I}${I}${I}xFrame = arg.Value
${I}${I}${I}${I}elif arg.Name == "ParentWindow":
${I}${I}${I}${I}${I}xParentWindow = arg.Value

${I}${I}${I}xUIElement = XUIPanel(self.ctx, xFrame, xParentWindow, url)

${I}${I}${I}# getting the real panel window
${I}${I}${I}# for setting the content
${I}${I}${I}xUIElement.getRealInterface()
${I}${I}${I}panelWin = xUIElement.Window

${I}${I}${I}# panelWin has to be set visible
${I}${I}${I}panelWin.Visible = True
${I}${I}${I}panelWin.Model.BackgroundColor = 14804725

${I}${I}${I}# get and set height to receive a working scrollbar
${I}${I}${I}height = create_some_content(panelWin,url)
${I}${I}${I}xUIElement.height = height

${I}${I}${I}return xUIElement

${I}${I}except Exception as e:
${I}${I}${I}print(e)
${I}${I}${I}tb()

g_ImplementationHelper = unohelper.ImplementationHelper()
g_ImplementationHelper.addImplementation(
        ElementFactory,
        "org.apache.openoffice.sidebar.SidebarExampleFactory",
        ("com.sun.star.task.Job",),)


class XUIPanel( unohelper.Base,  XSidebarPanel, XUIElement, XToolPanel, XComponent):

${I}def __init__(self, ctx, frame, xParentWindow, url):

${I}${I}self.ctx = ctx
${I}${I}self.xParentWindow = xParentWindow
${I}${I}self.window = None

${I}${I}self.height = 100

${I}# XUIElement
${I}def getRealInterface(self):

${I}${I}if not self.window:
${I}${I}${I}dialogUrl = "vnd.sun.star.extension://org.apache.openoffice.sidebar.SidebarExampleFactory/Dialog_Sidebar.xdl"
${I}${I}${I}smgr = self.ctx.ServiceManager

${I}${I}${I}provider = smgr.createInstanceWithContext("com.sun.star.awt.ContainerWindowProvider",self.ctx)
${I}${I}${I}self.window = provider.createContainerWindow(dialogUrl,"",self.xParentWindow, None)

${I}${I}return self

${I}@property
${I}def Frame(self):
${I}${I}self.frame = frame

${I}@property
${I}def ResourceURL(self):
${I}${I}return self.name

${I}@property
${I}def Type(self):
${I}${I}return UET_TOOLPANEL

${I}# XComponent
${I}def dispose(self):
${I}${I}pass

${I}def addEventListener(self, ev): pass

${I}def removeEventListener(self, ev): pass

${I}# XToolPanel
${I}def createAccessible(self, parent):
${I}${I}return self

${I}@property
${I}def Window(self):
${I}${I}return self.window

${I}# XSidebarPanel
${I}def getHeightForWidth(self, width):
${I}${I}# print("getHeightForWidth: %s" % width)
${I}${I}# return LayoutSize(0, -1, 0) # full height
${I}${I}return LayoutSize(self.height, self.height, self.height)

${I}# LO5.1-
${I}def getMinimalWidth(self):
${I}${I}return 50


def create_some_content(panelWin,url):

${I}ctx = uno.getComponentContext()
${I}# url is set in Sidebar.xcu
${I}if url == 'private:resource/toolpanel/SidebarExampleFactory/Panel1':

${I}${I}pos_y = 30
${I}${I}height = 200

${I}${I}#xray(panelWin)

${I}${I}app = Test_convert(panelWin)
${I}${I}app.showDialog()

${I}${I}return height + pos_y + 15

${I}elif url == 'private:resource/toolpanel/SidebarExampleFactory/Panel2':

${I}${I}pos_y = 20
${I}${I}height = 200

${I}${I}app = Test_convert(panelWin)
${I}${I}app.showDialog()

${I}${I}return height + pos_y + 15
